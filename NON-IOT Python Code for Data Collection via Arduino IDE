import serial
import csv
import time
import serial.tools.list_ports

# Function to find available serial ports
def find_serial_port():
    ports = serial.tools.list_ports.comports()
    for port in ports:
        print(f"Found port: {port.device}")  # Print available ports
    # Here you can select the first available port or adjust this to your needs
    if ports:
        return ports[0].device  # Select the first available port
    else:
        raise Exception("No serial ports found!")

# Find the serial port dynamically
serial_port = find_serial_port()

# Set up serial connection (use the found port)
ser = serial.Serial(serial_port, 9600)
time.sleep(2)  # Give Arduino some time to reset

# File to save the data
output_file = 'nonIoTData.csv'

# Open CSV file for writing
with open(output_file, mode='w', newline='') as file:
    writer = csv.writer(file)

    # Write CSV header
    writer.writerow([
        "Time (s)", "Voltage (V)", "Current (A)", "Power (W)", "Real-time Cost (USD)",
        "Total Cost (USD)", "HR Yearly Cost (USD)", "IT Yearly Cost (USD)",
        "Finance Yearly Cost (USD)", "External Relations Yearly Cost (USD)"
    ])

    start_time = time.time()

    # Loop for 3 hours (10,800 seconds)
    while time.time() - start_time < 3 * 60 * 60:  # 3 hours in seconds
        if ser.in_waiting > 0:
            # Read data from serial port
            line = ser.readline().decode('utf-8').strip()

            # Check if the line contains CSV data
            if line:
                data = line.split(',')
                
                # Ensure that we have the correct number of columns (10)
                if len(data) == 10:
                    # Write data to the CSV file
                    writer.writerow(data)
                    print(f"Data: {line}")  # Print received data

        time.sleep(1)  # Small delay to prevent excessive CPU usage

print("Data collection finished. CSV saved as nonIoTData.csv.")
ser.close()  # Close the serial connection
